---
import ReadingProgress from '@/components/blog/ReadingProgress.astro';
import BaseLayout from '@/layouts/BaseLayout.astro';
import { getNotionClient } from '@/lib/notion/client';
import { formatDate } from '@/lib/utils/strings';
import { getCollection, type CollectionEntry } from 'astro:content';
import { marked } from 'marked';
import { gfmHeadingId } from 'marked-gfm-heading-id';

// marked 설정
marked.use(gfmHeadingId());

export async function getStaticPaths() {
  const blogPosts = await getCollection('blog');

  return blogPosts.map((post) => ({
    params: { slug: post.data.slug },
    props: { post },
  }));
}

interface Props {
  post: CollectionEntry<'blog'>;
}

const { post } = Astro.props;
const { data } = post;

// Notion에서 콘텐츠 가져오기
const client = getNotionClient();
const content = await client.getPageContent(data.id);

// Markdown을 HTML로 변환
const htmlContent = marked(content);

// 헤딩 추출 (목차용)
const headingRegex = /^(#{2,3})\s+(.+)$/gm;
const headings: Array<{ depth: number; text: string; slug: string }> = [];
let match;

while ((match = headingRegex.exec(content)) !== null) {
  const depth = match[1]!.length;
  const text = match[2]!;
  const slug = text
    .toLowerCase()
    .replace(/[^\w\s가-힣-]/g, '')
    .replace(/\s+/g, '-');

  headings.push({ depth, text, slug });
}

// 날짜 변환 헬퍼
const toISOString = (date: Date | string): string => {
  return typeof date === 'string' ? date : date.toISOString();
};
---

<BaseLayout
  title={data.title}
  description={data.description}
  type="article"
  publishedTime={toISOString(data.publishDate)}
  modifiedTime={toISOString(data.lastModified)}
  author={data.author}
  tags={data.tags}
>
  <ReadingProgress />

  <article class="container py-8">
    <div class="mx-auto max-w-3xl">
      <!-- 헤더 -->
      <header class="mb-8">
        <h1
          class="mb-4 text-3xl font-bold tracking-tight text-gray-900 dark:text-white sm:text-4xl"
        >
          {data.title}
        </h1>

        <div class="flex items-center gap-3 font-mono text-sm text-gray-600 dark:text-gray-400">
          <time datetime={toISOString(data.publishDate)}>
            {formatDate(data.publishDate, { year: 'numeric', month: '2-digit', day: '2-digit' })}
          </time>
          {
            data.readingTime && (
              <>
                <span class="text-gray-400 dark:text-gray-600">•</span>
                <span>{data.readingTime}min read</span>
              </>
            )
          }
          {
            data.author && (
              <>
                <span class="text-gray-400 dark:text-gray-600">•</span>
                <span>{data.author}</span>
              </>
            )
          }
        </div>

        {
          data.tags.length > 0 && (
            <div class="mt-4 flex flex-wrap gap-2">
              {data.tags.map((tag) => (
                <span class="font-mono text-sm text-gray-500 dark:text-gray-500">#{tag}</span>
              ))}
            </div>
          )
        }
      </header>

      <!-- 콘텐츠 -->
      <div
        class="prose prose-lg max-w-none dark:prose-invert prose-pre:bg-gray-900 prose-pre:text-gray-100"
        set:html={htmlContent}
      />

      <!-- 하단 네비게이션 -->
      <nav
        class="mt-16 flex items-center justify-between border-t border-gray-200 pt-8 dark:border-gray-800"
      >
        <a
          href="/blog"
          class="font-mono text-sm text-gray-600 hover:text-primary-600 dark:text-gray-400 dark:hover:text-primary-400"
        >
          &lt;- back to list
        </a>
      </nav>
    </div>
  </article>
</BaseLayout>
