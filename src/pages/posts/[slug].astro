---
import { getCollection, type CollectionEntry } from 'astro:content';
import BaseLayout from '@/layouts/BaseLayout.astro';
import TableOfContents from '@/components/blog/TableOfContents.astro';
import ReadingProgress from '@/components/blog/ReadingProgress.astro';
import { formatDate } from '@/lib/utils/strings';
import { enhanceHtmlWithImageMetadata } from '@/lib/utils/image-rendering';
import '@/styles/blog-content.css';
import '@/styles/code-theme.css';

export async function getStaticPaths() {
  const posts = await getCollection('blog');

  return posts.map((post) => ({
    params: { slug: post.data.slug },
    props: { post },
  }));
}

const { post } = Astro.props as { post: CollectionEntry<'blog'> };
const { data } = post;

const renderedContent = post.rendered;
const headings = (renderedContent?.metadata?.headings || []) as Array<{
  depth: number;
  text: string;
  slug: string;
}>;

const baseHtmlContent = renderedContent?.html || '';
const { enhancedHtml: htmlContent, processedImageCount } = enhanceHtmlWithImageMetadata(
  baseHtmlContent,
  data.images,
);

if (import.meta.env.DEV) {
  console.log(`[Astro Page] Enhanced ${processedImageCount} images with metadata`);
}
---

<BaseLayout title={data.title} description={data.description} type="article">
  <ReadingProgress />

  <div class="container mx-auto px-4 sm:px-6">
    <div class="mx-auto max-w-7xl">
      <div class="lg:grid lg:grid-cols-[1fr_300px] lg:gap-8 xl:grid-cols-[1fr_320px]">
        <article class="mx-auto w-full max-w-3xl">
          <header class="mb-12">
            <div
              class="mb-4 flex flex-wrap items-center gap-2 font-mono text-sm text-gray-500 dark:text-gray-500"
            >
              <time datetime={data.publishDate.toISOString()}>
                {formatDate(data.publishDate)}
              </time>
              {
                data.readingTime && (
                  <>
                    <span>•</span>
                    <span>{data.readingTime} min read</span>
                  </>
                )
              }
            </div>

            <h1
              class="mb-6 text-3xl font-bold leading-tight text-gray-900 dark:text-gray-100 sm:text-4xl sm:leading-tight"
            >
              {data.title}
            </h1>

            {
              data.tags && data.tags.length > 0 && (
                <div class="flex flex-wrap gap-2">
                  {data.tags.map((tag) => (
                    <span class="inline-block rounded-full bg-gray-100 px-3 py-1 text-sm text-gray-700 dark:bg-gray-800 dark:text-gray-300">
                      #{tag}
                    </span>
                  ))}
                </div>
              )
            }
          </header>

          <div
            class="blog-content prose prose-gray max-w-none dark:prose-invert"
            set:html={htmlContent}
          />

          <footer class="mt-16 border-t border-gray-200 pt-8 dark:border-gray-800">
            <a
              href="/posts"
              class="inline-flex items-center gap-2 font-mono text-sm text-blue-600 hover:text-blue-700 hover:underline dark:text-blue-400 dark:hover:text-blue-300"
            >
              <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M15 19l-7-7 7-7"></path>
              </svg>
              back to posts
            </a>
          </footer>
        </article>

        <aside class="hidden lg:block">
          <TableOfContents headings={headings} />
        </aside>
      </div>
    </div>
  </div>
</BaseLayout>

<style>
  /* Blur placeholder 스타일 */
  .image-with-blur {
    position: relative;
    overflow: hidden;
    background-color: #f5f5f5;
    border-radius: 8px;
  }

  .image-with-blur img {
    display: block;
    width: 100%;
    height: auto;
    position: relative;
    z-index: 2;
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
  }

  .image-with-blur[data-loaded] img {
    opacity: 1;
  }

  /* 블러 이미지 스타일 */
  .image-with-blur .blur-placeholder {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    filter: blur(20px);
    transform: scale(1.1);
    transition: opacity 0.3s ease-in-out;
    z-index: 1;
  }

  .image-with-blur[data-loaded] .blur-placeholder {
    opacity: 0;
  }
</style>

<script>
  import { createImageLoadingManager } from '@/lib/utils/client-image-loader';

  document.addEventListener('DOMContentLoaded', () => {
    const imageManager = createImageLoadingManager();
    imageManager.initializeProgressiveImageLoading();
  });
</script>
