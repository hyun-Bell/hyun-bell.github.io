---
import { getCollection, type CollectionEntry } from 'astro:content';
import BaseLayout from '@/layouts/BaseLayout.astro';
import TableOfContents from '@/components/blog/TableOfContents.astro';
import ReadingProgress from '@/components/blog/ReadingProgress.astro';
import { formatDate } from '@/lib/utils/strings';
import { parseNotionMarkdown } from '@/lib/notion/markdown-parser';
import '@/styles/prism-theme.css';
import '@/styles/blog-content.css';

export async function getStaticPaths() {
  const posts = await getCollection('blog');

  // 미리 모든 컨텐츠 파싱
  const postsWithContent = await Promise.all(
    posts.map(async (post) => {
      // Meta 스타일 디버깅: 실제 콘텐츠 상태 확인
      const rawContent = post.data.content || '';
      
      if (import.meta.env.DEV && rawContent.includes('&#39;')) {
        console.warn('🔍 Raw Content Debug:', {
          slug: post.data.slug,
          hasEntities: rawContent.includes('&#39;'),
          sample: rawContent.substring(0, 150),
          entityCount: (rawContent.match(/&#39;/g) || []).length
        });
      }
      
      const { html, headings } = parseNotionMarkdown(rawContent);
      
      if (import.meta.env.DEV && rawContent.includes('&#39;')) {
        console.warn('🔍 Processed HTML Debug:', {
          slug: post.data.slug,
          stillHasEntities: html.includes('&#39;'),
          htmlSample: html.substring(0, 150)
        });
      }
      
      return {
        params: { slug: post.data.slug },
        props: { post, htmlContent: html, headings },
      };
    }),
  );

  return postsWithContent;
}

interface Props {
  post: CollectionEntry<'blog'>;
  htmlContent: string;
  headings: Array<{ depth: number; text: string; slug: string }>;
}

const { post, htmlContent, headings } = Astro.props;
const { data } = post;
---

<BaseLayout title={data.title} description={data.description} type="article">
  <ReadingProgress />

  <div class="container mx-auto px-4 sm:px-6">
    <div class="mx-auto max-w-7xl">
      <div class="lg:grid lg:grid-cols-[1fr_300px] lg:gap-8 xl:grid-cols-[1fr_320px]">
        <article class="mx-auto w-full max-w-3xl">
          <header class="mb-12">
            <div
              class="mb-4 flex flex-wrap items-center gap-2 font-mono text-sm text-gray-500 dark:text-gray-500"
            >
              <time datetime={data.publishDate.toISOString()}>
                {formatDate(data.publishDate)}
              </time>
              {
                data.readingTime && (
                  <>
                    <span>•</span>
                    <span>{data.readingTime} min read</span>
                  </>
                )
              }
            </div>

            <h1
              class="mb-6 text-3xl font-bold leading-tight text-gray-900 dark:text-gray-100 sm:text-4xl sm:leading-tight"
            >
              {data.title}
            </h1>

            {
              data.tags && data.tags.length > 0 && (
                <div class="flex flex-wrap gap-2">
                  {data.tags.map((tag) => (
                    <span class="inline-block rounded-full bg-gray-100 px-3 py-1 text-sm text-gray-700 dark:bg-gray-800 dark:text-gray-300">
                      #{tag}
                    </span>
                  ))}
                </div>
              )
            }
          </header>

          <div
            class="blog-content prose prose-gray max-w-none dark:prose-invert"
            set:html={htmlContent}
          />

          <footer class="mt-16 border-t border-gray-200 pt-8 dark:border-gray-800">
            <a
              href="/posts"
              class="inline-flex items-center gap-2 font-mono text-sm text-blue-600 hover:text-blue-700 hover:underline dark:text-blue-400 dark:hover:text-blue-300"
            >
              <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M15 19l-7-7 7-7"></path>
              </svg>
              back to posts
            </a>
          </footer>
        </article>

        <aside class="hidden lg:block">
          <TableOfContents headings={headings} />
        </aside>
      </div>
    </div>
  </div>
</BaseLayout>
