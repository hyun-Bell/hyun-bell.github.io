---
import type { CollectionEntry } from 'astro:content';

export interface Props {
  post: CollectionEntry<'blog'>;
  index: number;
  showNumber?: boolean;
}

const { post, index, showNumber = false } = Astro.props;

const formatDate = (date: Date): string => {
  return new Intl.DateTimeFormat('ko-KR', {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
  }).format(date);
};
---

<article class="post-item animate-fadeIn opacity-0" style={`animation-delay: ${index * 50}ms`}>
  <a
    href={`/blog/${post.data.slug}`}
    class="group -mx-4 block rounded-lg p-6 transition-colors hover:bg-gray-50 dark:hover:bg-gray-900/50"
  >
    <div class="flex items-start gap-4">
      {
        showNumber && (
          <span class="mt-1 font-mono text-xs text-gray-400 dark:text-gray-600">
            {String(index + 1).padStart(2, '0')}
          </span>
        )
      }

      <div class="flex-1 space-y-2">
        <div class="flex items-center gap-3 font-mono text-xs text-gray-500 dark:text-gray-500">
          <time datetime={post.data.publishDate.toISOString()}>
            {formatDate(post.data.publishDate)}
          </time>
          {
            post.data.readingTime && (
              <>
                <span>•</span>
                <span>{post.data.readingTime}min read</span>
              </>
            )
          }
        </div>

        <h2
          class="text-lg font-semibold text-gray-900 transition-colors group-hover:text-blue-600 dark:text-gray-100 dark:group-hover:text-blue-400"
          transition:name={`post-${post.data.slug}`}
        >
          {post.data.title}
        </h2>

        {
          post.data.description && (
            <p class="line-clamp-2 text-sm text-gray-600 dark:text-gray-400">
              {post.data.description}
            </p>
          )
        }

        {
          post.data.tags.length > 0 && (
            <div class="flex flex-wrap gap-2 pt-2">
              {post.data.tags.map((tag) => (
                <span class="font-mono text-xs text-gray-500 dark:text-gray-500">#{tag}</span>
              ))}
            </div>
          )
        }
      </div>

      <span
        class="mt-1 text-gray-400 transition-transform group-hover:translate-x-1 dark:text-gray-600"
      >
        →
      </span>
    </div>
  </a>
</article>

<style>
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-fadeIn {
    animation: fadeIn 0.5s ease-out forwards;
  }

  .line-clamp-2 {
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 2;
  }
</style>
