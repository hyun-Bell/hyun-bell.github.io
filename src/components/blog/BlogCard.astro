---
import { formatDate } from '@/lib/utils/strings';

export interface Props {
  post: {
    id: string;
    title: string;
    description?: string | undefined;
    slug: string;
    published: boolean;
    publishDate: Date | string;
    lastModified: Date | string;
    tags: string[];
    featured: boolean;
    author?: string | undefined;
    content?: string | undefined;
    readingTime?: number | undefined;
  };
  featured?: boolean;
}

const { post } = Astro.props;
---

<article class="group">
  <a
    href={`/blog/${post.slug}`}
    data-astro-prefetch="hover"
    class="block border-l-2 border-transparent py-6 pl-4 transition-all hover:border-primary-500 hover:bg-gray-50 dark:hover:bg-gray-900/50"
  >
    <div class="flex items-start justify-between gap-4">
      <div class="flex-1">
        <div class="flex items-center gap-3 font-mono text-xs text-gray-500 dark:text-gray-500">
          <time
            datetime={typeof post.publishDate === 'string'
              ? post.publishDate
              : post.publishDate.toISOString()}
          >
            {formatDate(post.publishDate, { year: 'numeric', month: '2-digit', day: '2-digit' })}
          </time>
          {post.readingTime && <span>{post.readingTime}min</span>}
        </div>
        <h2
          class="mt-1 text-xl font-semibold text-gray-900 group-hover:text-primary-600 dark:text-gray-100 dark:group-hover:text-primary-400"
        >
          {post.title}
        </h2>
        {
          post.description && (
            <p class="mt-2 line-clamp-2 text-gray-600 dark:text-gray-400">{post.description}</p>
          )
        }
        {
          post.tags.length > 0 && (
            <div class="mt-3 flex flex-wrap gap-2">
              {post.tags.map((tag) => (
                <span class="font-mono text-xs text-gray-500 dark:text-gray-500">#{tag}</span>
              ))}
            </div>
          )
        }
      </div>
    </div>
  </a>
</article>
