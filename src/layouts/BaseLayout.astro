---
import { ClientRouter } from 'astro:transitions';
import '../styles/global.css';
import ThemeScript from '../components/ThemeScript.astro';
import Header from '../components/layout/Header.astro';
import Footer from '../components/layout/Footer.astro';
import SEO from '../components/SEO.astro';
import { SITE_CONFIG } from '@/lib/constants/site';

export interface Props {
  title?: string;
  description?: string | undefined;
  image?: string | undefined;
  type?: 'website' | 'article';
}

const {
  title = SITE_CONFIG.title,
  description = SITE_CONFIG.description,
  image,
  type = 'website',
} = Astro.props;

const pageTitle = title === SITE_CONFIG.title ? title : `${title} | ${SITE_CONFIG.title}`;
---

<!doctype html>
<html lang="ko" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />
    <meta name="theme-color" content="#0f172a" media="(prefers-color-scheme: dark)" />
    <meta name="theme-color" content="#ffffff" media="(prefers-color-scheme: light)" />

    <!-- 테마 스크립트 (FOUC 방지) -->
    <ThemeScript />

    <!-- SEO -->
    <SEO title={pageTitle} description={description} image={image} type={type} />

    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;600&display=swap"
      rel="stylesheet"
    />

    <!-- ViewTransitions -->
    <ClientRouter />
  </head>
  <body>
    <!-- 전체 컨테이너 -->
    <div
      class="flex min-h-screen flex-col bg-white text-gray-900 dark:bg-gray-950 dark:text-gray-100"
      transition:name="app-container"
    >
      <!-- 헤더 -->
      <Header transition:persist />

      <!-- 메인 컨텐츠 -->
      <main class="container mx-auto flex-1 px-4 py-8 sm:px-6 lg:px-8">
        <slot />
      </main>

      <!-- 푸터 -->
      <Footer transition:persist />
    </div>

    <script>
      import { theme } from '@/lib/theme';

      // View Transitions API 지원 확인
      const supportsViewTransitions = 'startViewTransition' in document;

      if (!supportsViewTransitions) {
        console.warn('View Transitions API not supported, using fallback navigation');
      }

      // 스크롤 위치 관리
      const scrollPositions = new Map<string, number>();

      // 초기화
      document.addEventListener('DOMContentLoaded', () => {
        theme.init();
      });

      // View Transitions 이벤트 핸들링
      if (supportsViewTransitions) {
        // 페이지 전환 전 - 현재 상태 저장
        document.addEventListener('astro:before-preparation', () => {
          const url = window.location.pathname;
          scrollPositions.set(url, window.scrollY);
        });

        // DOM 교체 전 - 테마 상태 유지
        document.addEventListener('astro:before-swap', (event: any) => {
          const isDark = document.documentElement.classList.contains('dark');
          if (isDark && event.newDocument) {
            event.newDocument.documentElement.classList.add('dark');
          }
        });

        // 페이지 로드 완료 - 스크롤 복원 및 테마 재초기화
        document.addEventListener('astro:page-load', () => {
          // 테마 버튼 재연결
          theme.reinit();

          // 뒤로가기인 경우 스크롤 위치 복원
          const currentUrl = window.location.pathname;
          const savedPosition = scrollPositions.get(currentUrl);

          // @ts-ignore - history.state 타입 정의 없음
          if (savedPosition !== undefined && history.state?.index < history.state?.previousIndex) {
            // 부드러운 스크롤 복원
            requestAnimationFrame(() => {
              window.scrollTo({
                top: savedPosition,
                behavior: 'instant',
              });
            });
          }
        });
      }

      // 테마 변경 이벤트 로깅 (개발용)
      if (import.meta.env.DEV) {
        window.addEventListener('theme-changed', (event: any) => {
          console.log('[Theme] Changed to:', event.detail.theme);
        });
      }
    </script>
  </body>
</html>
